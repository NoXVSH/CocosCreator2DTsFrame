// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        outLightColor : {
          value: [1.0, 1.0, 1.0, 1.0],
          editor: {
            type: color,
            tooltip: "发光颜色"
          }
        }

        outLightSize : {
          value: 0.15,
          editor: {
            range: [0.0, 1.0],
            tooltip: "发光宽度",
          }
        }

        outThreshold : {
          value: 0.3,
          editor: {
            range: [0.0, 1.0],
            tooltip: "发光阈值",
          }
        }                
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform OutLight {
    vec4 outLightColor;
    float outLightSize;
    float outThreshold;
  };

  #if USE_TEXTURE
    float getFrameAlpha(float angle, float dist) {
      float rad = angle * 0.01745329252;
      return texture(texture, vec2(v_uv0.x + cos(rad) * dist, v_uv0.y + sin(rad) * dist)).a;
    }

    float getFrameNearAlpha(float dist) {
      float alpha = 0.0;

      alpha += getFrameAlpha(0.0, dist);
      alpha += getFrameAlpha(30.0, dist);
      alpha += getFrameAlpha(60.0, dist);
      alpha += getFrameAlpha(90.0, dist);
      alpha += getFrameAlpha(120.0, dist);
      alpha += getFrameAlpha(150.0, dist);
      alpha += getFrameAlpha(180.0, dist);
      alpha += getFrameAlpha(210.0, dist);   
      alpha += getFrameAlpha(240.0, dist);  
      alpha += getFrameAlpha(270.0, dist);  
      alpha += getFrameAlpha(300.0, dist);  
      alpha += getFrameAlpha(330.0, dist);  
      
      return alpha * 0.0833;  //1/12
    }

    float getOutAlpha(float dist) {
      float alpha = 0.0;

      alpha += getFrameNearAlpha(dist * 0.1);
      alpha += getFrameNearAlpha(dist * 0.2);
      alpha += getFrameNearAlpha(dist * 0.3);
      alpha += getFrameNearAlpha(dist * 0.4);
      alpha += getFrameNearAlpha(dist * 0.5);
      alpha += getFrameNearAlpha(dist * 0.6);   
      alpha += getFrameNearAlpha(dist * 0.7);  
      alpha += getFrameNearAlpha(dist * 0.8);
      alpha += getFrameNearAlpha(dist * 0.9);
      alpha += getFrameNearAlpha(dist * 1.0); 

      return alpha * 0.1;                     
    }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float alpha = v_color.a;

    #if USE_TEXTURE
      alpha *= getOutAlpha(outLightSize);
    #endif

    if(alpha > outThreshold) {
      alpha = 0.0;
    }

    alpha /= outThreshold;
    alpha = -1.0 * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) + 1.0;

    vec4 targetColor = outLightColor;
    targetColor.a *= alpha;


    gl_FragColor = o * o.a + targetColor * (1.0 - o.a);


    // gl_FragColor = o;
  }
}%
