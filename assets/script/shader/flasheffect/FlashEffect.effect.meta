{
  "ver": "1.0.25",
  "uuid": "7a186864-d0ca-49e6-87aa-10cd32f84f01",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float width;\nuniform float strength;\nuniform float offset;\nuniform float startPos;\nuniform float offsetX;\nuniform float offsetY;\nuniform float uvXStart;\nuniform float uvYStart;\nuniform float isRotated;\nuniform float isRotateFlash;\nvoid main () {\n  vec4 mainColor = v_color * texture2D(texture, v_uv0);\n  vec2 originUv = v_uv0.xy;\n  originUv.x = (originUv.x - uvXStart) / offsetX;\n  originUv.y = (originUv.y - uvYStart) / offsetY;\n  vec2 uv = originUv.xy;\n  if(isRotated == 1.0) {\n      uv.x = originUv.y;\n      uv.y = -originUv.x + 1.0;\n   }\n  if(isRotateFlash == 1.0) {\n      float start = startPos - offset * uv.x - width;\n      float end = start + width;\n      float center = (start + end) / 2.0;\n      float halfWidth = width / 2.0;\n      if(uv.y > start && uv.y < end)\n      {\n          float rate =  (halfWidth - abs(center - uv.y)) / halfWidth;\n          vec3 improve = strength * vec3(255.0, 255.0, 255.0) * rate;\n          vec3 result = improve + vec3( mainColor.r, mainColor.g, mainColor.b);\n          gl_FragColor = vec4(result, mainColor.a);\n      }\n      else\n      {\n          gl_FragColor = mainColor;\n      }\n  }\n  else {\n      float start = startPos - offset * uv.y - width;\n      float end = start + width;\n      float center = (start + end) / 2.0;\n      float halfWidth = width / 2.0;\n      if(uv.x > start && uv.x < end)\n      {\n          float rate = (halfWidth - abs(center - uv.x)) / halfWidth;\n          vec3 improve = strength * vec3(255.0, 255.0, 255.0) * rate;\n          vec3 result = improve + vec3( mainColor.r, mainColor.g, mainColor.b);\n          gl_FragColor = vec4(result, mainColor.a);\n      }\n      else\n      {\n          gl_FragColor = mainColor;\n      }\n  }\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float width;\n  float strength;\n  float offset;\n  float startPos;\n  float time;\n  float offsetX;\n  float offsetY;\n  float uvXStart;\n  float uvYStart;\n  float isRotated;\n  float isRotateFlash;\n};\nvoid main () {\n  vec4 mainColor = v_color * texture2D(texture, v_uv0);\n  vec2 originUv = v_uv0.xy;\n  originUv.x = (originUv.x - uvXStart) / offsetX;\n  originUv.y = (originUv.y - uvYStart) / offsetY;\n  vec2 uv = originUv.xy;\n  if(isRotated == 1.0) {\n      uv.x = originUv.y;\n      uv.y = -originUv.x + 1.0;\n   }\n  if(isRotateFlash == 1.0) {\n      float start = startPos - offset * uv.x - width;\n      float end = start + width;\n      float center = (start + end) / 2.0;\n      float halfWidth = width / 2.0;\n      if(uv.y > start && uv.y < end)\n      {\n          float rate =  (halfWidth - abs(center - uv.y)) / halfWidth;\n          vec3 improve = strength * vec3(255.0, 255.0, 255.0) * rate;\n          vec3 result = improve + vec3( mainColor.r, mainColor.g, mainColor.b);\n          gl_FragColor = vec4(result, mainColor.a);\n      }\n      else\n      {\n          gl_FragColor = mainColor;\n      }\n  }\n  else {\n      float start = startPos - offset * uv.y - width;\n      float end = start + width;\n      float center = (start + end) / 2.0;\n      float halfWidth = width / 2.0;\n      if(uv.x > start && uv.x < end)\n      {\n          float rate = (halfWidth - abs(center - uv.x)) / halfWidth;\n          vec3 improve = strength * vec3(255.0, 255.0, 255.0) * rate;\n          vec3 result = improve + vec3( mainColor.r, mainColor.g, mainColor.b);\n          gl_FragColor = vec4(result, mainColor.a);\n      }\n      else\n      {\n          gl_FragColor = mainColor;\n      }\n  }\n}"
      }
    }
  ],
  "subMetas": {}
}