{
  "ver": "1.0.25",
  "uuid": "0300be2c-b3ae-4890-8382-4394b30a912d",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nvoid main () {\n  vec4 mainColor = v_color;\n  mainColor *= texture2D(texture, v_uv0);\n  vec2 uv = v_uv0 - 0.5;\n  float rad = 0.1;\n  float offset = 0.01;\n  float time = cc_time.x;\n  vec2 rotate = vec2(cos(time), sin(time)) * 2.0;\n  mainColor.a = 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, 0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, -0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, -0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, 0.1) * rotate));\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float time;\n};\nvoid main () {\n  vec4 mainColor = v_color;\n  mainColor *= texture2D(texture, v_uv0);\n  vec2 uv = v_uv0 - 0.5;\n  float rad = 0.1;\n  float offset = 0.01;\n  float time = cc_time.x;\n  vec2 rotate = vec2(cos(time), sin(time)) * 2.0;\n  mainColor.a = 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, 0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, -0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, -0.1) * rotate));\n  mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, 0.1) * rotate));\n  ALPHA_TEST(mainColor);\n  gl_FragColor = mainColor;\n}"
      }
    }
  ],
  "subMetas": {}
}