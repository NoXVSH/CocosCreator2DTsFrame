CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Constant {
    float time;
  };

  void main () {
    vec4 mainColor = v_color;

    mainColor *= texture2D(texture, v_uv0);

    vec2 uv = v_uv0 - 0.5;

    float rad = 0.1;
    float offset = 0.01;

    float time = cc_time.x;
    vec2 rotate = vec2(cos(time), sin(time)) * 2.0;
    // vec2 rotate = vec2(1.0, 1.0);
    mainColor.a = 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, 0.1) * rotate));
    mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, -0.1) * rotate));
    mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(0.1, -0.1) * rotate));
    mainColor.a += 1.0 - smoothstep(rad - rad * offset, rad + rad * offset, length(uv - vec2(-0.1, 0.1) * rotate));

    ALPHA_TEST(mainColor);
    gl_FragColor = mainColor;
  }
}%
